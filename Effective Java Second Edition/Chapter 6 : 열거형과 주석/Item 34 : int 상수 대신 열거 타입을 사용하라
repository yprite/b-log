정수 열거 패턴

열거 타입을 지원하기 전엔 정수 열거 패턴 기법을 사용했다.



public static final int APPLE_FUJI = 0;
public static final int APPLE_PIPPIN = 1;
public static final int APPLE_GRANNY_SMITH = 2;





단점

    타입 안전을 보장할 방법이 없으며 표현력이 좋지 않음
    정수 열거 패턴을 위한 별도 이름공간을 지원하지 않기 때문에 접두어를 써서 이름 충돌을 방지해야 함
    정수 열거 패턴을 사용한 프로그램은 깨지기 쉬움
        상수의 값이 바뀌면 클라이언트도 반드시 다시 컴파일 해야 함
    문자열로 출력하기가 까다로움
        값을 출력하거나 디버거로 살펴보면 단지 숫자로만 보임
        문자열 상수를 사용하는 변형 패턴도 있지만, 문자열 상수의 이름 대신 문자열 값을 그대로 하드코딩 하게 만들고 이는 런타임 버그로 이어질 수 있음


→ 자바는 이런 열거 패턴의 단점을 해결하는 동시에 여러 장점을 안겨주는 열거 타입(enum type)을 제시했다.


열거 타입


열거 타입은 일정 개수의 상수 값을 정의한 다음, 그 이외의 값은 허용하지 않는 타입이다.


public enum Apple { FUJI, PIPPIN, GRANNY_SMITH }
public enum Orange { NAVEL, TEMPLE, BLOOD }


겉보기엔 C, C++, C# 같은 다른 언어의 열거 타입과 비슷하지만, 자바의 열거 타입은 완전한 형태의 클래스라서 다른 언어의 열거 타입보다 훨씬 강력하다.


    열거 타입 자체는 클래스이며, 상수 하나당 자신의 인스턴스를 하나씩 만들어 public static final 필드로 공개함
    밖에서 접근할 수 있는 생성자를 제공하지 않으므로 사실상 final 임
        클라이언트가 인스턴스를 직접 생성하거나 확장할 수 없어서 하나씩만 존재함이 보장됨
    열거 타입은 인스턴스 통제됨
    싱글턴은 원소가 하나뿐인 열거 타입이라 할 수 있고, 거꾸로 열거 타입은 싱글턴을 일반화한 형태라고 볼 수 있음
    열거 타입은 컴파일타임 타입 안전성을 제공함
        Apple 열거 타입을 매개변수로 받는 메소드를 선언했다면, 건네 받은 참조는 Apple의 세가지 값 중 하나임이 확실함
        다른 타입의 값을 넘기려하면 컴파일 오류가 남
    각자의 이름공간이 있어서 이름이 같은 상수도 평화롭게 공존할 수 있음
        새로운 상수를 추가하거나 순서를 바꿔도 다시 컴파일 할 필요가 없음
        공개되는 것은 오직 필드의 이름뿐. 상수값이 클라이언트로 컴파일되어 각인되지 않음
    임의의 메소드나 필드를 추가할 수 있고, 임의의 인터페이스를 구현할 수 있음



열거 타입에 메소드나 필드를 추가한다니, 어떨 때 필요한 기능인가?

각 상수와 연관된 데이터를 해당 상수 자체에 내재시키고 싶다고 해보자.

Apple과 Orange를 예로 들면, 과일의 색을 알려주거나 과일 이미지를 반환하는 메소드를 추가하고 싶을 수 있다.



ex. 태양계의 여덟 행성

각 열거 타입 상수 오른쪽 괄호 안 숫자는 생성자에게 넘겨지는 매개변수로, 행성의 질량과 반지름을 뜻한다.

public enum Planet {
    MERCURY(3.302e+23, 2.439e6),
    VENUS  (4.869e+24, 6.052e6),
    EARTH  (5.975e+24, 6.378e6),
    MARS   (6.419e+23, 3.393e6),
    JUPITER(1.899e+27, 7.149e7),
    SATURN (5.685e+26, 6.027e7),
    URANUS (8.683e+25, 2.556e7),
    NEPTUNE(1.024e+26, 2.477e7);

    // 열거 타입은 불변이라 모든 필드는 final
    // public으로 선언해도 되지만, private으로 선언하고 public 접근자 메소드를 두는게 나음
    private final double mass;           // 질량(단위: 킬로그램)
    private final double radius;         // 반지름(단위: 미터)
    private final double surfaceGravity; // 표면중력(단위: m / s^2)

    // 중력상수(단위: m^3 / kg s^2)
    private static final double G = 6.67300E-11;

    // 생성자
    Planet(double mass, double radius) {
        this.mass = mass;
        this.radius = radius;
        // 생성자에서 표면 중력을 계산해 저장한 이유는 단순히 최적화를 위해서임
        surfaceGravity = G * mass / (radius * radius);
    }

    public double mass()           { return mass; }
    public double radius()         { return radius; }
    public double surfaceGravity() { return surfaceGravity; }

    public double surfaceWeight(double mass) {
        return mass * surfaceGravity;  // F = ma
    }
}


열거 타입 상수 각각을 특정 데이터와 연결지으려면 생성자에서 데이터를 받아 인스턴스 필드에 저장하면 된다.

어떤 객체의 지구에서의 무게를 입력받아 여덟 행성에서 무게를 출력하는 코드는 다음 처럼 짧은 코드로 작성할 수 있다.

public class WeightTable {
    public static void main(String[] args) {
        double earthWeight = Double.parseDouble(args[0]);
        double mass = earthWeight / Planet.EARTH.surfaceGravity();
        for(Planet p : Planet.values())
            System.out.printf("%s에서의 무게는 %f이다.%n", p, p.surfaceWeight(mass));
    }
}

    열거 타입은 자신 안에 정의된 상수들의 값을 배열에 담아 반환하는 정적 메소드인 values를 제공함
    값들은 선언된 순서로 저장되며, 각 열거 타입 값의 toString 메소드는 상수 이름을 문자열로 반환하므로 println과 printf로 출력하기 안성맞춤임


열거 타입에서 상수를 하나 제거한다면?

제거한 상수를 참조하지 않는 클라이언트에는 아무 영향이 없다.

제거된 상수를 참조하는 클라이언트의 경우, 클라이언트 프로그램을 다시 컴파일하면 제거된 상수를 참조하는 줄에서 디버깅에 유용한 메시지를 담은 컴파일 오류가 발생할 것이다.


열거 타입을 선언한 클래스 혹은 그 패키지에서만 유용한 기능은 private이나 package-private 메소드로 구현한다.

이렇게 구현된 열거 타입 상수는 자신을 선언한 클래스 혹은 패키지에서만 사용할 수 있는 기능을 담게 된다.

→ 일반 클래스와 마찬가지로 클라이언트에 노출해야 할 합당한 이유가 없다면 private, 혹은 package-private으로 선언하라 (아이템 15)


널리 쓰이는 열거 타입은 톱레벨 클래스로 만들고, 특정 톱레벨 클래스에서만 쓰인다면 해당 클래스의 멤버 클래스로 만든다.

ex. 소수 자릿수의 반올림 모드를 뜻하는 열거타입 java.math.RoundingMode

    BigDecimal이 사용함
    but, 반올림 모드는 BigDecimal과 관련없는 영역에도 유용한 개념이라 자바 라이브러리 설계자가RoundingMode를 톱레벨로 올림
    이 개념을 많은 곳에서 사용하여 다양한 API가 일관된 모습을 갖출 수 있게 함


상수마다 동작이 달라져야 하는 상황


사칙연산 계산기의 연산 종류를 열거 타입으로 선언하고, 실제 연산까지 열거 타입 상수가 직접 수행했으면 한다고 해보자.


switch문을 이용해 상수의 값에 따라 분기


public enum Operation {
    PLUS, MINUS, TIMES, DIVIDE;
    
    // 상수가 뜻하는 연산을 수행한다.
    public double apply(double x, double y) {
        switch(this) {
            case PLUS: return x + y;
            case MINUS: return x - y;
            case TIMES: return x * y;
            case DIVIDE: return x / y;
        }
        throw new AssertionError("알 수 없는 연산: " + this);
    }
}



throw문은 도달할 일이 없지만, 기술적으로는 도달할 수 있기에 생략하면 컴파일 오류 발생함

    이 코드는 깨지기 쉬움
        새로운 상수를 추가하면 해당 case 문도 추가해야 함
        추가하지 않으면 새로 추가한 연산을 수행하려 할 때 런타임 오류를 냄
    열거 타입이 상수별로 다르게 동작하는 코드를 구현하는 더 나은 수단을 제공함 → 상수별 메서드 구현(constant-specific method implementation)



상수별 메소드 구현(constant-specific method implementation)


열거 타입에 apply라는 추상 메소드를 선언하고 각 상수별 클래스 몸체(constant-specific class body), 즉 각 상수에서 자신에 맞게 재정의하는 방법이다.


public enum Operation {
    PLUS {public double apply(double x, double y){return x + y;}},
    MINUS {public double apply(double x, double y){return x - y;}},
    TIMES {public double apply(double x, double y){return x * y;}},
    DIVIDE {public double apply(double x, double y){return x / y;}};

    public abstract double apply(double x, double y);
}


    apply 메소드가 상수 선언 바로 옆에 있으니 새로운 상수를 추가할 때 apply도 재정의해야 한다는 사실을 깜빡하기는 어려울 것
        apply가 추상메소드라 재정의하지 않으면 컴파일 오류로 알려줌



상수별 메소드 구현을 상수별 데이터와 결합할 수도 있다.


다음은 Operation의 toString을 재정의해 해당 연산을 뜻하는 기호를 반환하는 예다.

public enum Operation {
    PLUS("+") {public double apply(double x, double y){return x + y;}},
    MINUS("-") {public double apply(double x, double y){return x - y;}},
    TIMES("*") {public double apply(double x, double y){return x * y;}},
    DIVIDE("/") {public double apply(double x, double y){return x / y;}};
    
    private final String symbol;
    Operation(String symbol) {this.symbol = symbol;}
    
    @Override public String toString() {return symbol;}
    public abstract double apply(double x, double y);
}





다음은 이 toString이 계산식 출력을 얼마나 편하게 해주는지를 보여준다.

public static void main(String[] args) {
    double x = Double.parseDouble(args[0]);
    double y = Double.parseDouble(args[1]);
    for(Operation op : Operation.values())
        System.out.printf("%f %s %f = %f%n", x, op, y, op.apply(x,y));
}




