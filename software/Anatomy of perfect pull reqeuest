https://opensource.com/article/18/6/anatomy-perfect-pull-request

깨끗한 코드를 작성하는 것은 pull 요청을 생성할 때 신경써야 하는 많은 요소 중 하나일 뿐입니다.

큰 pull 요청은 코드 검토 중에 큰 오버헤드를 유발하고 코드베이스의 버그를 촉진할 수 있습니다.

그렇기 때문에 pull 요청 자체에 신경을 써야 합니다. 짧고 명확한 제목과 설명이 있어야 하며 한 가지만 수행해야 합니다.

왜 신경을 써야 합니까?
좋은 풀 리퀘스트는 빠르게 검토될 것입니다.
코드베이스에 대한 버그 도입을 줄입니다.
신규 개발자 온보딩을 용이하게 합니다.
다른 개발자를 차단하지 않습니다.
코드 검토 프로세스의 속도를 높이고 결과적으로 제품 개발 속도를 높입니다.
풀 리퀘스트의 크기
개발자.png
devloper - pull request.png의 크기
프로그래밍 및 개발
Red Hat 개발자 블로그
프로그래밍 치트 시트
무료 체험: Red Hat 학습 서브스크립션
eBook: Bash를 사용한 프로그래밍 소개
다운로드 가능한 가이드: 7가지 필수 PyPI 라이브러리 및 사용 방법
IDE란 무엇입니까?
문제가 있는 pull 요청을 식별하는 첫 번째 단계는 큰 차이점을 찾는 것입니다.
여러 연구에 따르면 많은 코드를 검토할 때 버그를 찾기가 더 어렵습니다.

또한 대규모 pull 요청은 코드에 의존할 수 있는 다른 개발자를 차단합니다.

완벽한 풀 리퀘스트 크기를 어떻게 결정할 수 있습니까?
Cisco Systems 프로그래밍 팀에 대한 연구에 따르면 60~90분에 걸쳐 200~400개의 LOC를 검토한 결과 70~90%의 결함이 발견되었습니다.

이 숫자를 염두에 두고 좋은 pull 요청에는 250줄 이상의 코드가 변경되어서는 안 됩니다.

pull_request_size_view_time.png
pull_request_size_view_time.png
소규모 비즈니스 프로그래밍의 이미지  .

위의 차트에서 볼 수 있듯이 250줄 이상의 변경 사항이 있는 pull 요청은 일반적으로 검토하는 데 1시간 이상 걸립니다.

큰 pull 요청을 더 작은 것으로 나누기
기능 분석은 예술입니다. 하면 할수록 쉬워집니다.

기능 분석이란 무엇을 의미합니까?

기능 분석은 큰 기능을 이해하고 의미가 있고 아무 것도 깨지지 않고 코드베이스에 하나씩 병합할 수 있는 작은 조각으로 나누는 것입니다.

함으로써 배우기
앱에 구독 기능을 만들어야 한다고 가정해 보겠습니다. 이메일 주소를 받아 저장하는 형식일 뿐입니다.

귀하의 앱이 어떻게 작동하는지 알지 못하더라도 이미 8개의 pull 요청으로 나눌 수 있습니다.

이메일 저장을 위한 모델 생성
요청을 수신하는 경로 생성
컨트롤러 만들기
데이터베이스에 저장하기 위한 서비스 생성(비즈니스 로직)
액세스 제어를 처리하는 정책 생성
구독 구성 요소 만들기(프론트엔드)
구독 구성 요소를 호출하는 버튼 만들기
인터페이스에 구독 버튼 추가
보시다시피, 저는 이 기능을 여러 부분으로 나누었으며 대부분은 다른 개발자가 동시에 수행할 수 있습니다.

단일 책임 원칙
단일 책임 원칙(SRP)은 모든 모듈 또는 클래스 가 소프트웨어 에서 제공 하는 기능 의 단일 부분에 대한 책임을 져야 하고 그 책임은 클래스에 의해 완전히 캡슐화 되어야 한다고 명시하는 컴퓨터 프로그래밍 원칙입니다 .

클래스 및 모듈과 마찬가지로 pull 요청은 한 가지만 수행해야 합니다.

SRP를 따르면 여러 문제를 해결하려고 시도하는 코드를 수정하여 발생하는 오버헤드를 줄입니다.

검토를 위해 PR을 제출하기 전에 단일 책임 원칙을 적용해 보십시오. 코드가 둘 이상의 작업을 수행하는 경우 다른 풀 요청으로 나눕니다.

제목 및 설명 문제
풀 리퀘스트를 생성할 때 제목과 설명에 주의해야 합니다.

코드 검토자가 무슨 일이 일어나고 있는지 모른 채 오늘 귀하의 팀에 합류한다고 상상해 보십시오. 그는 변화를 이해할 수 있어야 합니다.

좋은_제목_및_설명.png
좋은_제목_및_설명.png
좋은 제목과 설명이 어떻게 생겼는지

위의 이미지 는 좋은 제목과 설명이 어떻게 생겼는지 보여줍니다 .

풀 리퀘스트의 제목은 자명해야 합니다.
제목은 변경되는 내용을 명확히 해야 합니다.

여기 몇 가지 예가 있어요.

getEventTarget에 대한 테스트 케이스 추가
소문자로 시작하는 구성 요소를 생성할 때 수수께끼 같은 오류 메시지 개선
유용한 설명 만들기
pull 요청에서 변경된 사항 설명
이 PR이 존재하는 이유를 설명하십시오.
예를 들어 데이터베이스의 열을 변경하는 것과 같이 설정한 작업을 수행하는 방법을 명확히 하십시오. 어떻게 합니까? 오래된 데이터는 어떻게 됩니까?
스크린샷을 사용하여 변경된 사항을 보여줍니다.
요약
풀 리퀘스트 크기
pull 요청에는 최대 250줄의 변경이 있어야 합니다.

기능 분석
가능하면 풀 요청을 더 작은 것으로 나눕니다.

단일 책임 원칙
pull 요청은 한 가지만 수행해야 합니다.

제목
풀 리퀘스트가 하는 일을 설명하는 제목을 만드세요.

설명
변경된 내용, 변경된 이유 및 변경된 방법을 자세히 설명합니다.

